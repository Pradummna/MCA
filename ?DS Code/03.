#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a node at a specific position
struct Node* insertAtPosition(struct Node* p, int item, int position) {
    // Step 1: Allocate memory for a new node
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));

    // Step 2: Assign the data
    temp->data = item;
    // Step 3: Initialize traversal pointer
    struct Node* q = p;

    // Step 4: Check if the position is the beginning
    if (position == 1) {
        temp->next = p;  // Insert at the beginning
        p = temp;
        return p;        // Update the head pointer
    }
    // Step 5: Initialize a counter
    int count = 1;

    // Step 6: Traverse to the node before the desired position
    while (count < position - 1 && q != NULL) {
        q = q->next;
        count++;
    }
    // Step 7: Check if the position is invalid
    if (q == NULL) {
        printf("Invalid Position\n");
        free(temp); // Free the allocated memory
        return p;
    }

    // Step 8 & 9: Insert the new node
    temp->next = q->next;
    q->next = temp;
    return p; // Return the updated list
}

// Function to print the linked list
void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } printf("NULL\n");
}

// Main function
int main() {
    struct Node* head = NULL; // Initialize the list as empty

    // Insert some nodes at specific positions
    head = insertAtPosition(head, 10, 1); // Insert 10 at position 1
    head = insertAtPosition(head, 20, 2); // Insert 20 at position 2
    head = insertAtPosition(head, 15, 2); // Insert 15 at position 2

    // Print the list
    printf("Linked List: ");
    printList(head);
    return 0;
}
