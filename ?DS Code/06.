#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node* next;
};

// Function to delete a node at any position
struct Node* deleteAtPosition(struct Node* p, int position) {
    // Step 1: Check if the list is empty
    if (p == NULL) {
        printf("Underflow\n");
        return p;
    }

    // Step 2: Initialize traversal pointer
    struct Node* q = p;

    // Step 3: Check if the position is the first node
    if (position == 1) {
        p = p->next; // Update head to the next node
        free(q);     // Free the old first node
        return p;
    }

    // Step 4: Initialize count for traversing
    int count = 1;

    // Step 5: Traverse to the node just before the desired position
    while (count < position - 1 && q != NULL) {
        q = q->next;
        count++;
    }

    // Step 6: Check if position is invalid
    if (q == NULL || q->next == NULL) {
        printf("Invalid Position\n");
        return p;
    }

    // Step 7: Remove the node at the specified position
    struct Node* temp = q->next;
    q->next = temp->next;

    // Step 8: Free the node
    free(temp);

    return p;
}

// Function to print the linked list
void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Function to insert a node at the end (helper for testing)
struct Node* insertAtEnd(struct Node* p, int item) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = item;
    temp->next = NULL;

    if (p == NULL) {
        return temp; // The new node becomes the head
    }

    struct Node* q = p;
    while (q->next != NULL) {
        q = q->next;
    }
    q->next = temp;
    return p;
}

// Main function
int main() {
    struct Node* head = NULL; // Initialize the list as empty

    // Insert some nodes for testing
    head = insertAtEnd(head, 10);
    head = insertAtEnd(head, 20);
    head = insertAtEnd(head, 30);
    head = insertAtEnd(head, 40);

    // Print the list before deletion
    printf("Linked List before deletion: ");
    printList(head);

    // Delete a node at position 2
    int position = 2;
    printf("Deleting node at position %d...\n", position);
    head = deleteAtPosition(head, position);

    // Print the list after deletion
    printf("Linked List after deletion: ");
    printList(head);

    return 0;
}
