//14. Write a program to find the length of the longest increasing subsequence in an array.
#include<stdio.h>

int main() {
    int n;
    // Take the size of the array as input
    printf("Enter the size of the array: ");
    scanf("%d", &n);
    // Declare the array to store elements and dp array for LIS
    int arr[n], dp[n];
    // Step 1: Initialize dp array with 1 (minimum LIS for any element is 1)
    for (int i = 0; i < n; i++) {
        dp[i] = 1;
    }
    // Step 2: Input array elements
    printf("\nEnter Array Elements: ");
    for (int i = 0; i < n; i++) {
        printf("Index %d: ", i);
        scanf("%d", &arr[i]);
    }
    // Step 3: Calculate the LIS for each element
    // Loop through the array to find LIS ending at each index i
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i; j++) {
            // If arr[i] > arr[j], then arr[i] can extend the subsequence ending at arr[j]
            if (arr[i] > arr[j]) {
                // Update dp[i] to the maximum of its current value or dp[j] + 1
                dp[i] = (dp[j] + 1 > dp[i]) ? dp[j] + 1 : dp[i];
            }
        }
    }
    // Step 4: Find the maximum value in dp array
    // This represents the length of the longest increasing subsequence
    int max = dp[0];
    for (int i = 1; i < n; i++) {
        if (dp[i] > max) {
            max = dp[i];
        }
    }
    // Step 5: Output the result
    printf("\nLength of the Longest Increasing Subsequence: %d\n", max);
    return 0;
}
